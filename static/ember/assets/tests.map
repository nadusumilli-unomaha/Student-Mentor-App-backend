{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","frontend/tests/adapters/application.jshint.lint-test.js","frontend/tests/adapters/google.jshint.lint-test.js","frontend/tests/adapters/student.jshint.lint-test.js","frontend/tests/app.jshint.lint-test.js","frontend/tests/app.lint-test.js","frontend/tests/authenticators/torii.jshint.lint-test.js","frontend/tests/authorizers/google.jshint.lint-test.js","frontend/tests/components/nav-bar.jshint.lint-test.js","frontend/tests/components/page-footer.jshint.lint-test.js","frontend/tests/controllers/login.jshint.lint-test.js","frontend/tests/controllers/register.jshint.lint-test.js","frontend/tests/helpers/destroy-app.js","frontend/tests/helpers/destroy-app.jshint.lint-test.js","frontend/tests/helpers/ember-simple-auth.js","frontend/tests/helpers/equal.jshint.lint-test.js","frontend/tests/helpers/module-for-acceptance.js","frontend/tests/helpers/module-for-acceptance.jshint.lint-test.js","frontend/tests/helpers/resolver.js","frontend/tests/helpers/resolver.jshint.lint-test.js","frontend/tests/helpers/start-app.js","frontend/tests/helpers/start-app.jshint.lint-test.js","frontend/tests/helpers/torii.js","frontend/tests/helpers/x-select.js","frontend/tests/initializers/auth-manager.jshint.lint-test.js","frontend/tests/initializers/constants.jshint.lint-test.js","frontend/tests/models/student.jshint.lint-test.js","frontend/tests/models/user.jshint.lint-test.js","frontend/tests/resolver.jshint.lint-test.js","frontend/tests/router.jshint.lint-test.js","frontend/tests/routes/index.jshint.lint-test.js","frontend/tests/routes/login.jshint.lint-test.js","frontend/tests/routes/register.jshint.lint-test.js","frontend/tests/serializers/student.jshint.lint-test.js","frontend/tests/services/auth-manager.jshint.lint-test.js","frontend/tests/services/constants.jshint.lint-test.js","frontend/tests/test-helper.js","frontend/tests/test-helper.jshint.lint-test.js","frontend/tests/tests.lint-test.js","frontend/tests/unit/adapters/google-test.js","frontend/tests/unit/adapters/google-test.jshint.lint-test.js","frontend/tests/unit/adapters/student-test.js","frontend/tests/unit/adapters/student-test.jshint.lint-test.js","frontend/tests/unit/adapters/user-test.js","frontend/tests/unit/adapters/user-test.jshint.lint-test.js","frontend/tests/unit/initializers/session-test.js","frontend/tests/unit/initializers/session-test.jshint.lint-test.js","frontend/tests/unit/models/student-test.js","frontend/tests/unit/models/student-test.jshint.lint-test.js","frontend/tests/unit/serializers/user-test.js","frontend/tests/unit/serializers/user-test.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('frontend/tests/adapters/application.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('frontend/tests/adapters/google.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/google.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/google.js should pass jshint.');\n  });\n});","define('frontend/tests/adapters/student.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/student.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/student.js should pass jshint.');\n  });\n});","define('frontend/tests/app.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('frontend/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/google.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/google.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/student.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/student.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('authenticators/torii.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/torii.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('authorizers/google.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authorizers/google.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/nav-bar.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/nav-bar.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/page-footer.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/page-footer.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/register.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/equal.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/equal.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/auth-manager.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/auth-manager.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/constants.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/constants.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/student.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/student.js should pass ESLint\\n\\n5:2 - \\'attr\\' is assigned a value but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('models/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/register.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/student.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/student.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/auth-manager.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/auth-manager.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/constants.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/constants.js should pass ESLint\\n\\n');\n  });\n});","define('frontend/tests/authenticators/torii.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | authenticators/torii.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/torii.js should pass jshint.');\n  });\n});","define('frontend/tests/authorizers/google.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | authorizers/google.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authorizers/google.js should pass jshint.');\n  });\n});","define('frontend/tests/components/nav-bar.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/nav-bar.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/nav-bar.js should pass jshint.');\n  });\n});","define('frontend/tests/components/page-footer.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/page-footer.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/page-footer.js should pass jshint.');\n  });\n});","define('frontend/tests/controllers/login.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/login.js should pass jshint.');\n  });\n});","define('frontend/tests/controllers/register.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/register.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/register.js should pass jshint.\\ncontrollers/register.js: line 94, col 24, Confusing use of \\'!\\'.\\n\\n1 error');\n  });\n});","define('frontend/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  var run = Ember.run;\n  function destroyApp(application) {\n    run(application, 'destroy');\n  }\n});","define('frontend/tests/helpers/destroy-app.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _test) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n\n  var TEST_CONTAINER_KEY = 'authenticator:test'; /* global wait */\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n});","define('frontend/tests/helpers/equal.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/equal.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/equal.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'frontend/tests/helpers/start-app', 'frontend/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('frontend/tests/helpers/module-for-acceptance.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/resolver', ['exports', 'frontend/resolver', 'frontend/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('frontend/tests/helpers/resolver.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/start-app', ['exports', 'frontend/app', 'frontend/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  var merge = Ember.merge;\n  var run = Ember.run;\n  function startApp(attrs) {\n    var attributes = merge({}, _environment.default.APP);\n    attributes = merge(attributes, attrs); // use defaults, but you can override;\n\n    return run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('frontend/tests/helpers/start-app.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/torii', ['exports', 'frontend/config/environment'], function (exports, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.stubValidSession = stubValidSession;\n  var sessionServiceName = _environment.default.torii.sessionServiceName;\n  function stubValidSession(application, sessionData) {\n    var session = application.__container__.lookup('service:' + sessionServiceName);\n\n    var sm = session.get('stateMachine');\n    Ember.run(function () {\n      sm.send('startOpen');\n      sm.send('finishOpen', sessionData);\n    });\n  }\n});","define('frontend/tests/helpers/x-select', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.select = select;\n  var jQuery = Ember.$;\n\n\n  /**\n   * Picks an option from the select and sets it to be `selected` in the DOM.\n   *\n   * @method select\n   * @param {string|<jQuery>} selector - selector for the select to pick from.\n   * @param {string} texts - text of the option you are picking\n   */\n  function select(selector) {\n    for (var _len = arguments.length, texts = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      texts[_key - 1] = arguments[_key];\n    }\n\n    var $select = selector instanceof jQuery ? selector : Ember.$(selector);\n    var $options = $select.find('option');\n\n    if (!$options.length) {\n      throw 'No options found in ' + selector;\n    }\n\n    $options.each(function () {\n      var _this = this;\n\n      var $option = Ember.$(this);\n\n      Ember.run(function () {\n        _this.selected = texts.some(function (text) {\n          // uppercase both texts so the helper isn't case sensastive.\n          var optionText = $option.text().trim().toUpperCase();\n\n          return optionText === text.toUpperCase();\n        });\n\n        if (_this.selected) {\n          $option.prop('selected', true).trigger('change');\n        }\n      });\n    });\n  }\n});","define('frontend/tests/initializers/auth-manager.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/auth-manager.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/auth-manager.js should pass jshint.');\n  });\n});","define('frontend/tests/initializers/constants.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/constants.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/constants.js should pass jshint.');\n  });\n});","define('frontend/tests/models/student.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | models/student.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/student.js should pass jshint.\\nmodels/student.js: line 5, col 5, \\'attr\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('frontend/tests/models/user.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | models/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass jshint.');\n  });\n});","define('frontend/tests/resolver.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('frontend/tests/router.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('frontend/tests/routes/index.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('frontend/tests/routes/login.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass jshint.');\n  });\n});","define('frontend/tests/routes/register.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/register.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/register.js should pass jshint.');\n  });\n});","define('frontend/tests/serializers/student.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/student.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/student.js should pass jshint.');\n  });\n});","define('frontend/tests/services/auth-manager.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | services/auth-manager.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/auth-manager.js should pass jshint.');\n  });\n});","define('frontend/tests/services/constants.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | services/constants.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/constants.js should pass jshint.');\n  });\n});","define('frontend/tests/test-helper', ['frontend/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('frontend/tests/test-helper.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('frontend/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/google-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/google-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/student-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/student-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/initializers/session-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/session-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/student-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/student-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/user-test.js should pass ESLint\\n\\n');\n  });\n});","define('frontend/tests/unit/adapters/google-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:google', 'Unit | Adapter | google', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('frontend/tests/unit/adapters/google-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/google-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/google-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/adapters/student-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:student', 'Unit | Adapter | student', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('frontend/tests/unit/adapters/student-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/student-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/student-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/adapters/user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:user', 'Unit | Adapter | user', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('frontend/tests/unit/adapters/user-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/user-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/user-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/initializers/session-test', ['frontend/initializers/session', 'qunit', 'frontend/tests/helpers/destroy-app'], function (_session, _qunit, _destroyApp) {\n  'use strict';\n\n  var Application = Ember.Application;\n  var run = Ember.run;\n\n\n  (0, _qunit.module)('Unit | Initializer | session', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      run(function () {\n        _this.application = Application.create();\n        _this.application.deferReadiness();\n      });\n    },\n    afterEach: function afterEach() {\n      (0, _destroyApp.default)(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _session.initialize)(this.application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('frontend/tests/unit/initializers/session-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/initializers/session-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/session-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/models/student-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('student', 'Unit | Model | student', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('frontend/tests/unit/models/student-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/student-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/student-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/serializers/user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Serializer | user', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:user']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('frontend/tests/unit/serializers/user-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/serializers/user-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/user-test.js should pass jshint.');\n  });\n});","require('frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;","file":"tests.js"}